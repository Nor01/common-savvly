from common.util.logging_helper import get_logger

# -------------------------------------------------------------
# Class DeathProbability
# -------------------------------------------------------------
class DeathProbability:
    __instance = None

    gdeath_probablity = [
        # Male,Female,Male-Probability,Female-Probability   Age
        [100000, 100000, 0.0, 0.0],# 0
        [99370, 99477, 0.0, 0.0],  # 1
        [99327, 99443, 0.0, 0.0],  # 2
        [99298, 99422, 0.0, 0.0],  # 3
        [99276, 99406, 0.0, 0.0],  # 4
        [99260, 99392, 0.0, 0.0],  # 5
        [99245, 99379, 0.0, 0.0],  # 6
        [99232, 99368, 0.0, 0.0],  # 7
        [99219, 99358, 0.0, 0.0],  # 8
        [99208, 99348, 0.0, 0.0],  # 9
        [99197, 99339, 0.0, 0.0],  # 10
        [99188, 99330, 0.0, 0.0],  # 11
        [99177, 99320, 0.0, 0.0],  # 12
        [99162, 99309, 0.0, 0.0],  # 13
        [99139, 99295, 0.0, 0.0],  # 14
        [99105, 99278, 0.0, 0.0],  # 15
        [99059, 99257, 0.0, 0.0],  # 16
        [99001, 99232, 0.0, 0.0],  # 17
        [98929, 99203, 0.0, 0.0],  # 18
        [98845, 99170, 0.0, 0.0],  # 19
        [98746, 99132, 0.0, 0.0],  # 20
        [98633, 99090, 0.0, 0.0],  # 21
        [98506, 99044, 0.0, 0.0],  # 22
        [98367, 98993, 0.0, 0.0],  # 23
        [98220, 98938, 0.0, 0.0],  # 24
        [98067, 98880, 0.0, 0.0],  # 25
        [97910, 98820, 0.0, 0.0],  # 26
        [97746, 98756, 0.0, 0.0],  # 27
        [97579, 98689, 0.0, 0.0],  # 28
        [97406, 98617, 0.0, 0.0],  # 29
        [97229, 98540, 0.0, 0.0],  # 30
        [97048, 98458, 0.0, 0.0],  # 31
        [96862, 98370, 0.0, 0.0],  # 32
        [96672, 98278, 0.0, 0.0],  # 33
        [96478, 98181, 0.0, 0.0],  # 34
        [96278, 98079, 0.0, 0.0],  # 35
        [96072, 97973, 0.0, 0.0],  # 36
        [95860, 97861, 0.0, 0.0],  # 37
        [95641, 97743, 0.0, 0.0],  # 38
        [95417, 97619, 0.0, 0.0],  # 39
        [95188, 97488, 0.0, 0.0],  # 40
        [94951, 97348, 0.0, 0.0],  # 41
        [94706, 97200, 0.0, 0.0],  # 42
        [94450, 97042, 0.0, 0.0],  # 43
        [94178, 96872, 0.0, 0.0],  # 44
        [93890, 96690, 0.0, 0.0],  # 45
        [93581, 96494, 0.0, 0.0],  # 46
        [93250, 96282, 0.0, 0.0],  # 47
        [92893, 96052, 0.0, 0.0],  # 48
        [92505, 95802, 0.0, 0.0],  # 49
        [92082, 95529, 0.0, 0.0],  # 50
        [91622, 95231, 0.0, 0.0],  # 51
        [91122, 94907, 0.0, 0.0],  # 52
        [90577, 94554, 0.0, 0.0],  # 53
        [89986, 94171, 0.0, 0.0],  # 54
        [89345, 93755, 0.0, 0.0],  # 55
        [88651, 93304, 0.0, 0.0],  # 56
        [87903, 92816, 0.0, 0.0],  # 57
        [87098, 92292, 0.0, 0.0],  # 58
        [86236, 91734, 0.0, 0.0],  # 59
        [85316, 91143, 0.0, 0.0],  # 60
        [84333, 90515, 0.0, 0.0],  # 61
        [83286, 89846, 0.0, 0.0],  # 62
        [82177, 89134, 0.0, 0.0],  # 63
        [81013, 88375, 0.0, 0.0],  # 64
        [79795, 87568, 0.0, 0.0],  # 65
        [78518, 86703, 0.0, 0.0],  # 66
        [77172, 85774, 0.0, 0.0],  # 67
        [75755, 84774, 0.0, 0.0],  # 68
        [74263, 83696, 0.0, 0.0],  # 69
        [72691, 82533, 0.0, 0.0],  # 70
        [71027, 81272, 0.0, 0.0],  # 71
        [69261, 79900, 0.0, 0.0],  # 72
        [67384, 78413, 0.0, 0.0],  # 73
        [65390, 76809, 0.0, 0.0],  # 74
        [63272, 75079, 0.0, 0.0],  # 75
        [61015, 73207, 0.0, 0.0],  # 76
        [58611, 71177, 0.0, 0.0],  # 77
        [56065, 68981, 0.0, 0.0],  # 78
        [53383, 66613, 0.0, 0.0],  # 79
        [50573, 64068, 0.0, 0.0],  # 80
        [47629, 61328, 0.0, 0.0],  # 81
        [44553, 58385, 0.0, 0.0],  # 82
        [41361, 55251, 0.0, 0.0],  # 83
        [38074, 51946, 0.0, 0.0],  # 84
        [34718, 48487, 0.0, 0.0],  # 85
        [31321, 44887, 0.0, 0.0],  # 86
        [27915, 41159, 0.0, 0.0],  # 87
        [24539, 37326, 0.0, 0.0],  # 88
        [21241, 33424, 0.0, 0.0],  # 89
        [18070, 29503, 0.0, 0.0],  # 90
        [15080, 25627, 0.0, 0.0],  # 91
        [12322, 21866, 0.0, 0.0],  # 92
        [9837, 18294, 0.0, 0.0],   # 93
        [7656, 14982, 0.0, 0.0],   # 94
        [5798, 11987, 0.0, 0.0],   # 95
        [4269, 9363,  0.0, 0.0],   # 96
        [3057, 7136,  0.0, 0.0],   # 97
        [2129, 5308,  0.0, 0.0],   # 98
        [1445, 3854,  0.0, 0.0],   # 99
        [958, 2735,   0.0, 0.0],   # 100
        [619, 1893,   0.0, 0.0],   # 101
        [388, 1276,   0.0, 0.0],   # 102
        [237, 835,    0.0, 0.0],   # 103
        [140, 529,    0.0, 0.0],   # 104
        [80, 323,     0.0, 0.0],   # 105
        [44, 190,     0.0, 0.0],   # 106
        [23, 107,     0.0, 0.0],   # 107
        [11, 58,      0.0, 0.0],   # 108
        [5, 29,       0.0, 0.0],   # 109
        [2, 14,       0.0, 0.0],   # 110
        [1, 6,        0.0, 0.0],   # 112
        [1, 1,        0.0, 0.0],   # 113
        [1, 1,        0.0, 0.0],   # 114
        [1, 1,        0.0, 0.0],   # 115
        [1, 1,        0.0, 0.0],   # 116
        [1, 1,        0.0, 0.0],   # 117
        [1, 1,        0.0, 0.0],   # 118
        [1, 1,        0.0, 0.0],   # 119
        [1, 1,        0.0, 0.0],   # 120
    ]

    # ---------------------------------------------
    # Return the singletone object
    # ---------------------------------------------
    @staticmethod
    def get_instance():  # Static access method.
        if DeathProbability.__instance is None:
            DeathProbability()
        return DeathProbability.__instance

    # ---------------------------------------------
    # Constructor
    # ---------------------------------------------
    def __init__(self):
        if DeathProbability.__instance != None:
            raise Exception("This class is a singleton!")
            return
        DeathProbability.__instance = self
        self.glogger = get_logger("DP")
        self._calc_probability()

    # ----------------------------------------------------------------------
    # Calculate the probability of each age
    # ----------------------------------------------------------------------
    def _calc_probability(self):
        inx = 0
        size = len(self.gdeath_probablity)
        for inx in range(size - 1):
            cur_rec = self.gdeath_probablity[inx]
            next_rec = self.gdeath_probablity[inx+1]
            cur_rec[2] = (cur_rec[0] - next_rec[0])/next_rec[0]         # Male probability
            cur_rec[3] = (cur_rec[1] - next_rec[1])/next_rec[1]         # Female probability

    # ----------------------------------------------------------------------
    # Get death probability
    # ----------------------------------------------------------------------
    def get_death_probability(self, age : int, sex : str ) -> float:
        if age < 0 or age >= len(self.gdeath_probablity):
            self.glogger.error("Invalid age: %d - it must be between 0 to %d", age, len(self.gdeath_probablity))
            return 1.0
        if sex != 'F' and sex != 'M':
            self.glogger.error("Invalid sex: %s - it must be between either F or M", sex)
            return 1.0
        if sex == 'F':
            return self.gdeath_probablity[age][3]
        return self.gdeath_probablity[age][2]

# ---------------------------------------------------------------------------
# Get death probability
# ---------------------------------------------------------------------------
def dp_get_probability(age : int, sex : str ) -> float:
    return DeathProbability.get_instance().get_death_probability(age, sex)
